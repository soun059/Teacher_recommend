{"version":3,"sources":["components/loginPage.js","containers/loginPage.js","App.js","serviceWorker.js","index.js"],"names":["LoginPage","props","state","dark","forgot","signup","this","setState","className","style","background","Grid","container","item","xs","sm","lg","Switch","color","checked","onChange","handleColorChange","bind","inputProps","Card","raised","elevation","CardHeader","title","CardContent","Typography","OutlinedInput","id","fullWidth","type","placeholder","borderRadius","marginLeft","Link","onClick","handleForgotClose","Button","variant","handleSignUpClose","Dialog","open","onClose","aria-labelledby","PaperProps","backgroundColor","DialogTitle","DialogContent","DialogContentText","autoFocus","margin","label","DialogActions","marginBottom","React","Component","LoginPage_cont","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77e99bf6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../styles/loginPage.css\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Link,\r\n  OutlinedInput,\r\n  Switch,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  TextField,\r\n  DialogTitle\r\n} from \"@material-ui/core\";\r\nclass LoginPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dark: true,\r\n      forgot: false,\r\n      signup: false\r\n    };\r\n  }\r\n  handleColorChange() {\r\n    this.setState({\r\n      dark: !this.state.dark\r\n    });\r\n  }\r\n\r\n  handleForgotClose() {\r\n    this.setState({\r\n      forgot: !this.state.forgot\r\n    });\r\n  }\r\n\r\n  handleSignUpClose() {\r\n    this.setState({\r\n      signup: !this.state.signup\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"Login-body\"\r\n        style={{ background: this.state.dark ? \"#131419\" : \"white\" }}\r\n      >\r\n        <Grid container className=\"Grid-body\">\r\n          <Grid item container xs={12} sm={6} lg={6} className=\"headers\">\r\n            <div className=\"switch\">\r\n              Dark Mode\r\n              <Switch\r\n                color=\"inherit\"\r\n                checked={this.state.dark}\r\n                onChange={this.handleColorChange.bind(this)}\r\n                inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n              />\r\n            </div>\r\n            <Grid item xs=\"12\">\r\n              <h1\r\n                className=\"Login-header\"\r\n                style={{\r\n                  color: this.state.dark ? \"white\" : \"#868686\"\r\n                }}\r\n              >\r\n                Welcome to Teacher-Search Engine\r\n              </h1>\r\n            </Grid>\r\n            <Grid item xs=\"12\">\r\n              <div className=\"Login-sub-header\">\r\n                Find your best tutor for your projects today\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs=\"12\" sm=\"6\" lg=\"6\" className=\"card-login\">\r\n            <Card\r\n              className=\"card-box\"\r\n              raised={true}\r\n              elevation={3}\r\n              style={{\r\n                background: this.state.dark ? \"#131419\" : \"white\"\r\n              }}\r\n            >\r\n              <CardHeader title=\"Login\" className=\"card-text\"></CardHeader>\r\n              <CardContent>\r\n                <Typography className=\"card-text\">\r\n                  Enter Your College ID and password to continue\r\n                </Typography>\r\n              </CardContent>\r\n              <CardContent>\r\n                <OutlinedInput\r\n                  id=\"standard-adornment-amount\"\r\n                  //onChange={handleChange('amount')}\r\n                  fullWidth\r\n                  type=\"email\"\r\n                  placeholder=\"Email\"\r\n                  style={{\r\n                    color: \"#868686\",\r\n                    borderRadius: \"50px\"\r\n                  }}\r\n                  className=\"inputEmail\"\r\n                  color=\"secondary\"\r\n                />\r\n                <OutlinedInput\r\n                  id=\"standard-adornment-amount\"\r\n                  //onChange={handleChange('amount')}\r\n                  fullWidth\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  style={{ color: \"#868686\", borderRadius: \"50px\" }}\r\n                />\r\n              </CardContent>\r\n              <div style={{ marginLeft: \"20px\" }}>\r\n                <Link\r\n                  className=\"card-links\"\r\n                  onClick={this.handleForgotClose.bind(this)}\r\n                >\r\n                  Forgot Password?{\" \"}\r\n                </Link>{\" \"}\r\n              </div>\r\n              <CardContent className=\"button-pos\" className=\"card-text-button\">\r\n                <Button variant=\"outlined\" color=\"inherit\">\r\n                  Submit\r\n                </Button>\r\n              </CardContent>\r\n              <CardContent className=\"card-text\">\r\n                Not a member yet?{\" \"}\r\n                <Link\r\n                  className=\"card-links\"\r\n                  onClick={this.handleSignUpClose.bind(this)}\r\n                >\r\n                  Sign Up\r\n                </Link>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n        {this.state.forgot ? (\r\n          <Dialog\r\n            open={this.state.forgot}\r\n            onClose={this.handleForgotClose.bind(this)}\r\n            aria-labelledby=\"form-dialog-title\"\r\n            fullWidth={345}\r\n            PaperProps={{\r\n              style: {\r\n                backgroundColor: this.state.dark ? \"#131419\" : \"white\",\r\n                borderRadius: \"20px\"\r\n              }\r\n            }}\r\n          >\r\n            <DialogTitle className=\"card-text\">Forgot Password?</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText style={{ color: \"#868686\" }}>\r\n                Enter the registered mail id\r\n              </DialogContentText>\r\n              <OutlinedInput\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"Email Address\"\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                style={{ color: \"#868686\", borderRadius: \"50px\" }}\r\n                color=\"inherit\"\r\n                fullWidth\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                onClick={this.handleForgotClose.bind(this)}\r\n                color=\"secondary\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={this.handleForgotClose.bind(this)}\r\n                color=\"primary\"\r\n              >\r\n                Next\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        ) : null}\r\n        {this.state.signup ? (\r\n          <Dialog\r\n            open={this.state.signup}\r\n            onClose={this.handleSignUpClose.bind(this)}\r\n            aria-labelledby=\"form-dialog-title\"\r\n            fullWidth={345}\r\n            PaperProps={{\r\n              style: {\r\n                backgroundColor: this.state.dark ? \"#131419\" : \"white\",\r\n                borderRadius: \"20px\"\r\n              }\r\n            }}\r\n          >\r\n            <DialogTitle className=\"card-text\">New User?</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText style={{ color: \"#868686\" }}>\r\n                Enter Details of the College ID and Password to register\r\n              </DialogContentText>\r\n              <OutlinedInput\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"Name\"\r\n                type=\"name\"\r\n                placeholder=\"Name\"\r\n                style={{\r\n                  color: \"#868686\",\r\n                  borderRadius: \"50px\",\r\n                  marginBottom: \"10px\"\r\n                }}\r\n                color=\"inherit\"\r\n                fullWidth\r\n              />\r\n              <OutlinedInput\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"Email Address\"\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                style={{\r\n                  color: \"#868686\",\r\n                  borderRadius: \"50px\",\r\n                  marginBottom: \"10px\"\r\n                }}\r\n                color=\"inherit\"\r\n                fullWidth\r\n              />\r\n              <OutlinedInput\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                style={{ color: \"#868686\", borderRadius: \"50px\" }}\r\n                color=\"inherit\"\r\n                fullWidth\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                onClick={this.handleSignUpClose.bind(this)}\r\n                color=\"secondary\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={this.handleSignUpClose.bind(this)}\r\n                color=\"primary\"\r\n              >\r\n                Next\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\nimport LoginPage from '../components/loginPage';\r\n\r\nclass LoginPage_cont extends React.Component{\r\n    render()\r\n    {\r\n        return <LoginPage></LoginPage>;\r\n    }\r\n}\r\n\r\nexport default LoginPage_cont;","import React from 'react';\nimport LoginPageCont from './containers/loginPage';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LoginPageCont></LoginPageCont>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}